"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_src_lib_auth_ts";
exports.ids = ["_ssr_src_lib_auth_ts"];
exports.modules = {

/***/ "(ssr)/./src/lib/auth.ts":
/*!*************************!*\
  !*** ./src/lib/auth.ts ***!
  \*************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearAllCache: () => (/* binding */ clearAllCache),\n/* harmony export */   clearAuthCookies: () => (/* binding */ clearAuthCookies),\n/* harmony export */   getAuthenticatedUser: () => (/* binding */ getAuthenticatedUser),\n/* harmony export */   storeUserInfo: () => (/* binding */ storeUserInfo),\n/* harmony export */   validateAndRefreshToken: () => (/* binding */ validateAndRefreshToken)\n/* harmony export */ });\n/* harmony import */ var next_server__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! next/server */ \"(ssr)/./node_modules/next/dist/api/server.js\");\n/* harmony import */ var _jwt__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./jwt */ \"(ssr)/./src/lib/jwt.ts\");\n\n\n/**\r\n * Validates access token and refreshes it if expired using refresh token\r\n * Returns authentication result and optionally a response with new cookies\r\n */ async function validateAndRefreshToken(request) {\n    const accessToken = request.cookies.get('accessToken')?.value;\n    const refreshToken = request.cookies.get('refreshToken')?.value;\n    // If no access token, try to use refresh token\n    if (!accessToken) {\n        if (!refreshToken) {\n            return {\n                isAuthenticated: false\n            };\n        }\n        return await refreshAccessToken(refreshToken);\n    }\n    // Try to verify access token\n    try {\n        const user = (0,_jwt__WEBPACK_IMPORTED_MODULE_1__.verifyToken)(accessToken);\n        return {\n            isAuthenticated: true,\n            user\n        };\n    } catch (error) {\n        // Access token is invalid/expired, try refresh token\n        if (!refreshToken) {\n            return {\n                isAuthenticated: false\n            };\n        }\n        return await refreshAccessToken(refreshToken);\n    }\n}\n/**\r\n * Creates new access token using refresh token\r\n */ async function refreshAccessToken(refreshToken) {\n    try {\n        // Verify refresh token\n        const user = (0,_jwt__WEBPACK_IMPORTED_MODULE_1__.verifyToken)(refreshToken);\n        // Generate new access token\n        const newAccessToken = (0,_jwt__WEBPACK_IMPORTED_MODULE_1__.generateAccessToken)(user);\n        const accessTokenExpiry = (0,_jwt__WEBPACK_IMPORTED_MODULE_1__.getTokenExpiry)(process.env.JWT_ACCESS_EXPIRY || '15m');\n        // Create response with new access token cookie\n        const response = next_server__WEBPACK_IMPORTED_MODULE_0__.NextResponse.next();\n        response.cookies.set('accessToken', newAccessToken, {\n            httpOnly: true,\n            secure: false,\n            sameSite: 'lax',\n            expires: accessTokenExpiry,\n            path: '/'\n        });\n        return {\n            isAuthenticated: true,\n            user,\n            response\n        };\n    } catch (error) {\n        // Refresh token is also invalid\n        return {\n            isAuthenticated: false\n        };\n    }\n}\n/**\r\n * Clears authentication cookies and user info\r\n */ function clearAuthCookies(response) {\n    response.cookies.set('accessToken', '', {\n        httpOnly: true,\n        secure: \"development\" === 'production',\n        sameSite: 'lax',\n        expires: new Date(0),\n        path: '/'\n    });\n    response.cookies.set('refreshToken', '', {\n        httpOnly: true,\n        secure: \"development\" === 'production',\n        sameSite: 'lax',\n        expires: new Date(0),\n        path: '/'\n    });\n    // Clear user info cookie as well\n    response.cookies.set('userInfo', '', {\n        httpOnly: false,\n        secure: \"development\" === 'production',\n        sameSite: 'lax',\n        expires: new Date(0),\n        path: '/'\n    });\n    return response;\n}\n/**\r\n * Gets authenticated user from request cookies\r\n * Automatically sets refreshed tokens in response cookies\r\n */ async function getAuthenticatedUser(request) {\n    const authResult = await validateAndRefreshToken(request);\n    // If tokens were refreshed, set them directly in the response using Next.js cookies\n    if (authResult.response && authResult.isAuthenticated) {\n        try {\n            const { cookies } = await __webpack_require__.e(/*! import() */ \"vendor-chunks/next\").then(__webpack_require__.bind(__webpack_require__, /*! next/headers */ \"(ssr)/./node_modules/next/dist/api/headers.js\"));\n            const cookieStore = await cookies();\n            const refreshedCookies = authResult.response.cookies.getAll();\n            // Set refreshed cookies directly in the current API response\n            refreshedCookies.forEach((cookie)=>{\n                cookieStore.set(cookie.name, cookie.value, {\n                    httpOnly: true,\n                    secure: \"development\" === 'production',\n                    sameSite: 'lax',\n                    expires: cookie.expires ? new Date(cookie.expires) : undefined,\n                    path: '/'\n                });\n            });\n        } catch (error) {\n            console.error('Failed to set refreshed cookies:', error);\n        }\n    }\n    return authResult.isAuthenticated ? authResult.user || null : null;\n}\n/**\r\n * Clears all user-specific cache and storage data (client-side)\r\n * Call this function on logout to prevent data leakage between users\r\n */ function clearAllCache() {\n    console.log('üßπ Starting cache clearing process...');\n    try {\n        // Clear localStorage\n        if (typeof Storage !== 'undefined' && localStorage) {\n            const localStorageCount = localStorage.length;\n            localStorage.clear();\n            console.log(`‚úÖ LocalStorage cleared (${localStorageCount} items)`);\n        } else {\n            console.log('‚ö†Ô∏è LocalStorage not available');\n        }\n        // Clear sessionStorage  \n        if (typeof Storage !== 'undefined' && sessionStorage) {\n            const sessionStorageCount = sessionStorage.length;\n            sessionStorage.clear();\n            console.log(`‚úÖ SessionStorage cleared (${sessionStorageCount} items)`);\n        } else {\n            console.log('‚ö†Ô∏è SessionStorage not available');\n        }\n        // Clear all cookies manually (in addition to server-side clearing)\n        if (typeof document !== 'undefined') {\n            const cookiesBefore = document.cookie;\n            console.log('üç™ Cookies before clearing:', cookiesBefore);\n            document.cookie.split(';').forEach((cookie)=>{\n                const eqPos = cookie.indexOf('=');\n                const name = eqPos > -1 ? cookie.substr(0, eqPos).trim() : cookie.trim();\n                if (name) {\n                    // Clear cookie for current path\n                    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/`;\n                    // Clear cookie for domain\n                    document.cookie = `${name}=; expires=Thu, 01 Jan 1970 00:00:00 GMT; path=/; domain=${window.location.hostname}`;\n                    console.log(`üóëÔ∏è Cleared cookie: ${name}`);\n                }\n            });\n            const cookiesAfter = document.cookie;\n            console.log('üç™ Cookies after clearing:', cookiesAfter);\n        } else {\n            console.log('‚ö†Ô∏è Document not available for cookie clearing');\n        }\n        // Clear Service Worker caches\n        if ('caches' in window) {\n            caches.keys().then((names)=>{\n                console.log(`üóÑÔ∏è Found ${names.length} cache(s) to clear:`, names);\n                names.forEach((name)=>{\n                    caches.delete(name).then((success)=>{\n                        console.log(`${success ? '‚úÖ' : '‚ùå'} Cache '${name}' deletion: ${success}`);\n                    });\n                });\n            }).catch((error)=>{\n                console.warn('‚ùå Could not clear Service Worker caches:', error);\n            });\n        } else {\n            console.log('‚ö†Ô∏è Service Worker caches not available');\n        }\n        // Clear any React/Next.js specific cached data\n        if (false) {}\n        console.log('‚úÖ All user cache cleared successfully');\n    } catch (error) {\n        console.error('‚ùå Error clearing user cache:', error);\n    }\n}\n/**\r\n * Stores user information in cookie as JSON string\r\n */ function storeUserInfo(response, userPayload) {\n    try {\n        // Store user info as JSON string in cookie\n        const userInfoJson = JSON.stringify(userPayload);\n        response.cookies.set('userInfo', userInfoJson, {\n            httpOnly: false,\n            secure: false,\n            sameSite: 'lax',\n            expires: new Date(Date.now() + 7 * 24 * 60 * 60 * 1000),\n            path: '/'\n        });\n        return response;\n    } catch (error) {\n        console.error('Error storing user info:', error);\n        return response;\n    }\n} /**\r\n * Protected route patterns that require authentication\r\n */  // export const PROTECTED_ROUTES = [\n //   '/admin',\n //   '/executive',\n //   '/api/admin',\n //   '/api/executive'\n // ];\n /**\r\n * Public route patterns that don't require authentication\r\n */  // export const PUBLIC_ROUTES = [\n //   '/',\n //   '/api/auth'\n // ];\n /**\r\n * Checks if a path requires authentication\r\n */  // export function isProtectedRoute(pathname: string): boolean {\n //   return PROTECTED_ROUTES.some(route => pathname.startsWith(route));\n // }\n /**\r\n * Checks if a path is public\r\n */  // export function isPublicRoute(pathname: string): boolean {\n //   return PUBLIC_ROUTES.some(route => pathname.startsWith(route));\n // }\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/auth.ts\n");

/***/ }),

/***/ "(ssr)/./src/lib/jwt.ts":
/*!************************!*\
  !*** ./src/lib/jwt.ts ***!
  \************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateAccessToken: () => (/* binding */ generateAccessToken),\n/* harmony export */   generateRefreshToken: () => (/* binding */ generateRefreshToken),\n/* harmony export */   getTokenExpiry: () => (/* binding */ getTokenExpiry),\n/* harmony export */   verifyToken: () => (/* binding */ verifyToken)\n/* harmony export */ });\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! jsonwebtoken */ \"(ssr)/./node_modules/jsonwebtoken/index.js\");\n/* harmony import */ var jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(jsonwebtoken__WEBPACK_IMPORTED_MODULE_0__);\n\nconst JWT_SECRET = process.env.JWT_SECRET || 'zopvish12';\nconst JWT_ACCESS_EXPIRY = process.env.JWT_ACCESS_EXPIRY || '15m';\nconst JWT_REFRESH_EXPIRY = process.env.JWT_REFRESH_EXPIRY || '7d';\nfunction generateAccessToken(payload) {\n    // Remove existing exp and iat properties to avoid conflicts\n    const cleanPayload = {\n        userId: payload.userId,\n        email: payload.email,\n        username: payload.username,\n        role: payload.role\n    };\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign(cleanPayload, JWT_SECRET, {\n        expiresIn: JWT_ACCESS_EXPIRY\n    });\n}\nfunction generateRefreshToken(payload) {\n    // Remove existing exp and iat properties to avoid conflicts\n    const cleanPayload = {\n        userId: payload.userId,\n        email: payload.email,\n        username: payload.username,\n        role: payload.role\n    };\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().sign(cleanPayload, JWT_SECRET, {\n        expiresIn: JWT_REFRESH_EXPIRY\n    });\n}\nfunction verifyToken(token) {\n    return jsonwebtoken__WEBPACK_IMPORTED_MODULE_0___default().verify(token, JWT_SECRET);\n}\nfunction getTokenExpiry(expiry) {\n    const now = new Date();\n    if (expiry.includes('m')) {\n        const minutes = parseInt(expiry.replace('m', ''));\n        return new Date(now.getTime() + minutes * 60 * 1000);\n    } else if (expiry.includes('d')) {\n        const days = parseInt(expiry.replace('d', ''));\n        return new Date(now.getTime() + days * 24 * 60 * 60 * 1000);\n    } else if (expiry.includes('h')) {\n        const hours = parseInt(expiry.replace('h', ''));\n        return new Date(now.getTime() + hours * 60 * 60 * 1000);\n    }\n    // Default to 15 minutes\n    return new Date(now.getTime() + 15 * 60 * 1000);\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9zcmMvbGliL2p3dC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7QUFBK0I7QUFFL0IsTUFBTUMsYUFBYUMsUUFBUUMsR0FBRyxDQUFDRixVQUFVLElBQUk7QUFDN0MsTUFBTUcsb0JBQW9CRixRQUFRQyxHQUFHLENBQUNDLGlCQUFpQixJQUFJO0FBQzNELE1BQU1DLHFCQUFxQkgsUUFBUUMsR0FBRyxDQUFDRSxrQkFBa0IsSUFBSTtBQVN0RCxTQUFTQyxvQkFBb0JDLE9BQXFCO0lBQ3ZELDREQUE0RDtJQUM1RCxNQUFNQyxlQUFlO1FBQ25CQyxRQUFRRixRQUFRRSxNQUFNO1FBQ3RCQyxPQUFPSCxRQUFRRyxLQUFLO1FBQ3BCQyxVQUFVSixRQUFRSSxRQUFRO1FBQzFCQyxNQUFNTCxRQUFRSyxJQUFJO0lBQ3BCO0lBQ0EsT0FBTyx3REFBaUIsQ0FBQ0osY0FBY1AsWUFBWTtRQUFFYSxXQUFXVjtJQUFrQjtBQUNwRjtBQUVPLFNBQVNXLHFCQUFxQlIsT0FBcUI7SUFDeEQsNERBQTREO0lBQzVELE1BQU1DLGVBQWU7UUFDbkJDLFFBQVFGLFFBQVFFLE1BQU07UUFDdEJDLE9BQU9ILFFBQVFHLEtBQUs7UUFDcEJDLFVBQVVKLFFBQVFJLFFBQVE7UUFDMUJDLE1BQU1MLFFBQVFLLElBQUk7SUFDcEI7SUFDQSxPQUFPLHdEQUFpQixDQUFDSixjQUFjUCxZQUFZO1FBQUVhLFdBQVdUO0lBQW1CO0FBQ3JGO0FBRU8sU0FBU1csWUFBWUMsS0FBYTtJQUN2QyxPQUFPakIsMERBQVUsQ0FBQ2lCLE9BQU9oQjtBQUMzQjtBQUVPLFNBQVNrQixlQUFlQyxNQUFjO0lBQzNDLE1BQU1DLE1BQU0sSUFBSUM7SUFFaEIsSUFBSUYsT0FBT0csUUFBUSxDQUFDLE1BQU07UUFDeEIsTUFBTUMsVUFBVUMsU0FBU0wsT0FBT00sT0FBTyxDQUFDLEtBQUs7UUFDN0MsT0FBTyxJQUFJSixLQUFLRCxJQUFJTSxPQUFPLEtBQUtILFVBQVUsS0FBSztJQUNqRCxPQUFPLElBQUlKLE9BQU9HLFFBQVEsQ0FBQyxNQUFNO1FBQy9CLE1BQU1LLE9BQU9ILFNBQVNMLE9BQU9NLE9BQU8sQ0FBQyxLQUFLO1FBQzFDLE9BQU8sSUFBSUosS0FBS0QsSUFBSU0sT0FBTyxLQUFLQyxPQUFPLEtBQUssS0FBSyxLQUFLO0lBQ3hELE9BQU8sSUFBSVIsT0FBT0csUUFBUSxDQUFDLE1BQU07UUFDL0IsTUFBTU0sUUFBUUosU0FBU0wsT0FBT00sT0FBTyxDQUFDLEtBQUs7UUFDM0MsT0FBTyxJQUFJSixLQUFLRCxJQUFJTSxPQUFPLEtBQUtFLFFBQVEsS0FBSyxLQUFLO0lBQ3BEO0lBRUEsd0JBQXdCO0lBQ3hCLE9BQU8sSUFBSVAsS0FBS0QsSUFBSU0sT0FBTyxLQUFLLEtBQUssS0FBSztBQUM1QyIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFx2aXNoYVxcRGVza3RvcFxcTmV3IGZvbGRlciAoNClcXFpvcHBlclxcc3JjXFxsaWJcXGp3dC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgand0IGZyb20gJ2pzb253ZWJ0b2tlbic7XHJcblxyXG5jb25zdCBKV1RfU0VDUkVUID0gcHJvY2Vzcy5lbnYuSldUX1NFQ1JFVCB8fCAnem9wdmlzaDEyJztcclxuY29uc3QgSldUX0FDQ0VTU19FWFBJUlkgPSBwcm9jZXNzLmVudi5KV1RfQUNDRVNTX0VYUElSWSB8fCAnMTVtJztcclxuY29uc3QgSldUX1JFRlJFU0hfRVhQSVJZID0gcHJvY2Vzcy5lbnYuSldUX1JFRlJFU0hfRVhQSVJZIHx8ICc3ZCc7XHJcblxyXG5leHBvcnQgaW50ZXJmYWNlIFRva2VuUGF5bG9hZCB7XHJcbiAgdXNlcklkOiBzdHJpbmc7XHJcbiAgZW1haWw6IHN0cmluZztcclxuICB1c2VybmFtZTogc3RyaW5nO1xyXG4gIHJvbGU6IHN0cmluZztcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGdlbmVyYXRlQWNjZXNzVG9rZW4ocGF5bG9hZDogVG9rZW5QYXlsb2FkKTogc3RyaW5nIHtcclxuICAvLyBSZW1vdmUgZXhpc3RpbmcgZXhwIGFuZCBpYXQgcHJvcGVydGllcyB0byBhdm9pZCBjb25mbGljdHNcclxuICBjb25zdCBjbGVhblBheWxvYWQgPSB7XHJcbiAgICB1c2VySWQ6IHBheWxvYWQudXNlcklkLFxyXG4gICAgZW1haWw6IHBheWxvYWQuZW1haWwsXHJcbiAgICB1c2VybmFtZTogcGF5bG9hZC51c2VybmFtZSxcclxuICAgIHJvbGU6IHBheWxvYWQucm9sZVxyXG4gIH07XHJcbiAgcmV0dXJuIChqd3QgYXMgYW55KS5zaWduKGNsZWFuUGF5bG9hZCwgSldUX1NFQ1JFVCwgeyBleHBpcmVzSW46IEpXVF9BQ0NFU1NfRVhQSVJZIH0pO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gZ2VuZXJhdGVSZWZyZXNoVG9rZW4ocGF5bG9hZDogVG9rZW5QYXlsb2FkKTogc3RyaW5nIHtcclxuICAvLyBSZW1vdmUgZXhpc3RpbmcgZXhwIGFuZCBpYXQgcHJvcGVydGllcyB0byBhdm9pZCBjb25mbGljdHNcclxuICBjb25zdCBjbGVhblBheWxvYWQgPSB7XHJcbiAgICB1c2VySWQ6IHBheWxvYWQudXNlcklkLFxyXG4gICAgZW1haWw6IHBheWxvYWQuZW1haWwsXHJcbiAgICB1c2VybmFtZTogcGF5bG9hZC51c2VybmFtZSxcclxuICAgIHJvbGU6IHBheWxvYWQucm9sZVxyXG4gIH07XHJcbiAgcmV0dXJuIChqd3QgYXMgYW55KS5zaWduKGNsZWFuUGF5bG9hZCwgSldUX1NFQ1JFVCwgeyBleHBpcmVzSW46IEpXVF9SRUZSRVNIX0VYUElSWSB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIHZlcmlmeVRva2VuKHRva2VuOiBzdHJpbmcpOiBUb2tlblBheWxvYWQge1xyXG4gIHJldHVybiBqd3QudmVyaWZ5KHRva2VuLCBKV1RfU0VDUkVUKSBhcyBUb2tlblBheWxvYWQ7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBnZXRUb2tlbkV4cGlyeShleHBpcnk6IHN0cmluZyk6IERhdGUge1xyXG4gIGNvbnN0IG5vdyA9IG5ldyBEYXRlKCk7XHJcbiAgXHJcbiAgaWYgKGV4cGlyeS5pbmNsdWRlcygnbScpKSB7XHJcbiAgICBjb25zdCBtaW51dGVzID0gcGFyc2VJbnQoZXhwaXJ5LnJlcGxhY2UoJ20nLCAnJykpO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgKyBtaW51dGVzICogNjAgKiAxMDAwKTtcclxuICB9IGVsc2UgaWYgKGV4cGlyeS5pbmNsdWRlcygnZCcpKSB7XHJcbiAgICBjb25zdCBkYXlzID0gcGFyc2VJbnQoZXhwaXJ5LnJlcGxhY2UoJ2QnLCAnJykpO1xyXG4gICAgcmV0dXJuIG5ldyBEYXRlKG5vdy5nZXRUaW1lKCkgKyBkYXlzICogMjQgKiA2MCAqIDYwICogMTAwMCk7XHJcbiAgfSBlbHNlIGlmIChleHBpcnkuaW5jbHVkZXMoJ2gnKSkge1xyXG4gICAgY29uc3QgaG91cnMgPSBwYXJzZUludChleHBpcnkucmVwbGFjZSgnaCcsICcnKSk7XHJcbiAgICByZXR1cm4gbmV3IERhdGUobm93LmdldFRpbWUoKSArIGhvdXJzICogNjAgKiA2MCAqIDEwMDApO1xyXG4gIH1cclxuICBcclxuICAvLyBEZWZhdWx0IHRvIDE1IG1pbnV0ZXNcclxuICByZXR1cm4gbmV3IERhdGUobm93LmdldFRpbWUoKSArIDE1ICogNjAgKiAxMDAwKTtcclxufVxyXG4iXSwibmFtZXMiOlsiand0IiwiSldUX1NFQ1JFVCIsInByb2Nlc3MiLCJlbnYiLCJKV1RfQUNDRVNTX0VYUElSWSIsIkpXVF9SRUZSRVNIX0VYUElSWSIsImdlbmVyYXRlQWNjZXNzVG9rZW4iLCJwYXlsb2FkIiwiY2xlYW5QYXlsb2FkIiwidXNlcklkIiwiZW1haWwiLCJ1c2VybmFtZSIsInJvbGUiLCJzaWduIiwiZXhwaXJlc0luIiwiZ2VuZXJhdGVSZWZyZXNoVG9rZW4iLCJ2ZXJpZnlUb2tlbiIsInRva2VuIiwidmVyaWZ5IiwiZ2V0VG9rZW5FeHBpcnkiLCJleHBpcnkiLCJub3ciLCJEYXRlIiwiaW5jbHVkZXMiLCJtaW51dGVzIiwicGFyc2VJbnQiLCJyZXBsYWNlIiwiZ2V0VGltZSIsImRheXMiLCJob3VycyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./src/lib/jwt.ts\n");

/***/ })

};
;