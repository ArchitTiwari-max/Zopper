// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EXECUTIVE
}

model User {
  id        String   @id @map("_id")
  email     String   @unique
  username  String   @unique
  password  String
  role      Role     @default(EXECUTIVE)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  executive Executive?
  admin Admin?
  
  @@map("User")
}

model Executive {
  id        String   @id @map("_id") 
  name      String
  contact_number String
  region    String?
  visits    Visit[]
  assigned  Assigned[]
  userId String @unique 
  user   User   @relation(fields: [userId], references: [id])
  assignedStoreIds String[] 
}

model Admin {
  id        String   @id @map("_id") 
  name      String
  contact_number String
  region    String?
  userId String @unique 
  user   User   @relation(fields: [userId], references: [id])
}
//
// Store & Brand 
//
model Store {
  id             String   @id @map("_id") 
  storeName      String
  city           String
  fullAddress    String?
  visits Visit[]
  partnerBrandIds String[] 
}

model Brand {
  id         String   @id @map("_id")
  brandName  String
  category   String?
}
//
// Visit & Issue
//

enum viststatus {
  PENDING_REVIEW
  REVIEWD
}
model Visit {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  personMet      Json     // [{ name: "Rajesh", designation: "Manager", phone: "1234567890" }]
  displayChecked Boolean
  remarks        String?
  imageUrls      String[]   // Array of image URLs
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  status         viststatus @default(PENDING_REVIEW)
  adminComment   String?
  // relations
  executiveId String  
  executive   Executive @relation(fields: [executiveId], references: [id])

  storeId String 
  store   Store  @relation(fields: [storeId], references: [id])
  brandIds String[] 

  issues   Issue[]   // One Visit can have multiple Issues or none
}

enum IssueStatus {
  Pending
  Assigned
  Resolved
}

model Issue {
  id        String      @id @default(auto()) @map("_id") @db.ObjectId
  details   String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  status    IssueStatus @default(Pending)

  // relation
  visitId   String      @db.ObjectId
  visit     Visit       @relation(fields: [visitId], references: [id])

  assigned  Assigned[]  // One Issue can have multiple Assigned records
}

enum AssignedStatus {
  Assigned
  In_Progress
  Completed
}

model Assigned {
  id           String         @id @default(auto()) @map("_id") @db.ObjectId
  adminComment String?
  createdAt    DateTime       @default(now())
  status       AssignedStatus @default(Assigned)

  // relation to Issue
  issueId String @db.ObjectId
  issue   Issue  @relation(fields: [issueId], references: [id])

  // relation to Executive
  executiveId String    
  executive   Executive  @relation(fields: [executiveId], references: [id])

  // relation to AssignReport
  assignReport AssignReport?
}

model AssignReport {
  id              String   @id @default(auto()) @map("_id") @db.ObjectId
  remarks         String   // Required field
  personMetName   String?  // Optional field
  personMetDesignation String?  // Optional field
  photoUrls       String[] // Array of photo URLs (optional)
  createdAt       DateTime @default(now())

  // relation to Assigned task
  assignedId String   @unique @db.ObjectId
  assigned   Assigned @relation(fields: [assignedId], references: [id], onDelete: Cascade)

  @@map("AssignReport")
}


model OTP {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String
  otp       String
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  @@map("Otp")
}
